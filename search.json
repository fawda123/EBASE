[{"path":[]},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement mbeck@tbep.org. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://fawda123.github.io/EBASE/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://fawda123.github.io/EBASE/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to EBASE","title":"Contributing to EBASE","text":"outlines propose change EBASE. detailed info contributing , please see development contributing guide.","code":""},{"path":"https://fawda123.github.io/EBASE/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to EBASE","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://fawda123.github.io/EBASE/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to EBASE","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://fawda123.github.io/EBASE/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to EBASE","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://fawda123.github.io/EBASE/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to EBASE","text":"Please note EBASE project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://fawda123.github.io/EBASE/CONTRIBUTING.html","id":"see-tidyverse-development-contributing-guide","dir":"","previous_headings":"","what":"See tidyverse development contributing guide","title":"Contributing to EBASE","text":"details.","code":""},{"path":[]},{"path":"https://fawda123.github.io/EBASE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"https://fawda123.github.io/EBASE/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"https://fawda123.github.io/EBASE/articles/ebase-overview.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"EBASE overview","text":"vignette provides overview theory use EBASE R package Estuarine BAyesian Single-station Estimation method ecosystem metabolism. Use following install package R-Universe. JAGS software must also installed use package. Follow instructions link download install JAGS version appropriate operating system. Load package installation use functions.","code":"# Enable the r-universe repo options(repos = c(     fawda123 = 'https://fawda123.r-universe.dev',     CRAN = 'https://cloud.r-project.org'))  # Install install.packages('EBASE') library(EBASE)"},{"path":"https://fawda123.github.io/EBASE/articles/ebase-overview.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"EBASE overview","text":"example file called exdat() included package demonstrates required time series format use functions. includes nearly year continuously monitored water quality meteorological data Apalachicola National Estuarine Research Reserve. required data include date time vector (DateTimeStamp), dissolved oxygen (mg/L, DO_obs) , water temperature (C, Temp), salinity (psu, Sal), PAR (W/m2/s, PAR), wind speed (m/s, WSpd). time step consistent throughout dataset indicated argument ebase() function (see ). exdat() dataset can viewed time package loaded used examples help files: core function estimate metabolism ebase(). metabolic estimates based mass balance equation Grace et al. (2015) gas exchange estimate Wanninkhof (2014). similar provided BASEmetab R package https://github.com/dgiling/BASEmetab, modifications estimate different parameters optimized JAGS model: \\[ \\frac{\\delta{C_d}}{\\delta{t}} = [\\,aPAR]\\, - [\\,r]\\, - \\frac{1}{H}\\left[-bU_{10}^2\\left(\\frac{s_c}{600} \\right)^{-0.5} \\left(C_{Sat} - C_d \\right )\\right] \\] metabolic estimates defined change dissolved oxygen time step \\(\\frac{\\delta{C_d}}{\\delta{t}}\\), gross production provided \\(aPAR\\), respiration provided \\(r\\), gas exchange provided remainder. Required inputs equation dissolved oxygen concentration \\(C_d\\), solar radiation \\(PAR\\), water column depth \\(H\\) (meters), wind speed \\(U\\). inputs schmidt number \\(s_c\\) dissolved oxygen saturation \\(C_{Sat}\\) calculated observed data. remaining three parameters \\(\\), \\(r\\), \\(b\\) estimated likelihood given observed data JAGS model using prior distributions shown model file. time step, change oxygen concentration time steps calculated equation using model inputs parameter guesses, finite difference approximation used estimate modeled oxygen concentration. estimated concentration also returned, can compared observed one measure model performance. following shows use ebase() function subset four days exdat() example dataset. Running model entire year take minutes, subset used: , ebase() function used estimate metabolic rates appropriate function arguments. timestep interval 900 seconds (15 minutes), water column depth H 1.85 meters, log file model iterations day created setting progress = TRUE, two Markov chains used n.chains = 2. practice, larger number n.chains used verify model convergence. results returned data frame instantaneous metabolic estimates volumetric gross production (O2 mmol/m3/d, Pg_vol \\(aPAR\\) ), respiration (O2 mmol/m3/d, Rt_vol \\(r\\) ), gas exchange (O2 mmol/m3/d, D remainder equation abov). Additional parameters estimated model returned include b shown equation. parameter constant represents primary production per quantum light units (mmol/m3/d)(W/m2) used estimate gross production (Grace et al. 2015). b parameter constant used estimate gas exchange hr/cm (provided 0.251 eqn. 4 Wanninkhof (2014)). plot results can made ebase_plot().  daily averages can also plotted using instantaneous = FALSE.  Execution time model can also reduced registering parallel backend.","code":"head(exdat) #>         DateTimeStamp   DO_obs Temp  Sal PAR WSpd #> 1 2012-02-23 00:00:00 8.217998 16.4 23.0   0  3.6 #> 2 2012-02-23 00:15:00 8.210692 16.4 22.8   0  3.5 #> 3 2012-02-23 00:30:00 8.203855 16.4 22.7   0  3.6 #> 4 2012-02-23 00:45:00 8.197538 16.4 22.9   0  4.2 #> 5 2012-02-23 01:00:00 8.191786 16.4 22.7   0  3.6 #> 6 2012-02-23 01:15:00 8.186632 16.4 23.4   0  4.1 library(dplyr) library(lubridate)  # subset four days in June dat <- exdat %>%   filter(month(exdat$DateTimeStamp) == 6 & day(exdat$DateTimeStamp) %in% 1:4)  head(dat) #>         DateTimeStamp   DO_obs Temp  Sal PAR WSpd #> 1 2012-06-01 00:00:00 5.185803 29.5 23.0   0  2.0 #> 2 2012-06-01 00:15:00 5.174494 29.5 23.3   0  2.3 #> 3 2012-06-01 00:30:00 5.163948 29.5 23.4   0  2.1 #> 4 2012-06-01 00:45:00 5.154150 29.5 23.3   0  2.0 #> 5 2012-06-01 01:00:00 5.145070 29.5 23.1   0  1.7 #> 6 2012-06-01 01:15:00 5.136675 29.5 24.0   0  1.8 res <- ebase(dat, interval = 900, H = 1.85, progress = TRUE, n.chains = 2) head(res) #>         Date   DO_obs   DO_mod       DateTimeStamp       dDO          a #> 2 2012-06-01 161.7030 161.9898 2012-06-01 00:15:00 -6.392482 0.00766078 #> 3 2012-06-01 161.3734 161.9472 2012-06-01 00:30:00 -4.082373 0.00766078 #> 4 2012-06-01 161.0672 161.8878 2012-06-01 00:45:00 -5.703880 0.00766078 #> 5 2012-06-01 160.7834 161.8209 2012-06-01 01:00:00 -6.423503 0.00766078 #> 6 2012-06-01 160.5211 161.7332 2012-06-01 01:15:00 -8.420908 0.00766078 #> 7 2012-06-01 160.2787 161.6509 2012-06-01 01:30:00 -7.903096 0.00766078 #>           b Pg_vol   Rt_vol        D #> 2 0.2259031      0 13.74739 7.354905 #> 3 0.2259031      0 13.74739 9.665015 #> 4 0.2259031      0 13.74739 8.043508 #> 5 0.2259031      0 13.74739 7.323884 #> 6 0.2259031      0 13.74739 5.326479 #> 7 0.2259031      0 13.74739 5.844291 ebase_plot(res) ebase_plot(res, instantaneous = FALSE) # setup parallel backend library(doParallel) cl <- makeCluster(2) registerDoParallel(cl)  res <- ebase(dat, interval = 900, H = 1.85, progress = TRUE, n.chains = 2)  stopCluster(cl)"},{"path":"https://fawda123.github.io/EBASE/articles/ebase-overview.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"EBASE overview","text":"Grace, Michael R, Darren P Giling, Sally Hladyz, Valerie Caron, Ross M Thompson, Ralph Mac Nally. 2015. “Fast Processing Diel Oxygen Curves: Estimating Stream Metabolism Base (Ba Yesian S Ingle-Station E Stimation).” Limnology Oceanography: Methods 13 (3): 103–14. https://doi.org/10.1002/lom3.10011. Wanninkhof, Rik. 2014. “Relationship Wind Speed Gas Exchange Ocean Revisited.” Limnology Oceanography: Methods 12 (6): 351–62. https://doi.org/10.4319/lom.2014.12.351.","code":""},{"path":"https://fawda123.github.io/EBASE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marcus Beck. Author, maintainer. Maria Herrmann. Author. Jill Arriola. Author. Raymond Najjar. Author. Wade McGillis. Author.","code":""},{"path":"https://fawda123.github.io/EBASE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beck M, Herrmann M, Arriola J, Najjar R, McGillis W (2022). EBASE: Estuarine Bayesian Single-Station Estimation Method Ecosystem Metabolism. https://fawda123.github.io/EBASE, https://github.com/fawda123/EBASE.","code":"@Manual{,   title = {EBASE: Estuarine Bayesian Single-Station Estimation Method for Ecosystem Metabolism},   author = {Marcus Beck and Maria Herrmann and Jill Arriola and Raymond Najjar and Wade McGillis},   year = {2022},   note = {https://fawda123.github.io/EBASE, https://github.com/fawda123/EBASE}, }"},{"path":"https://fawda123.github.io/EBASE/index.html","id":"ebase","dir":"","previous_headings":"","what":"Estuarine Bayesian Single-Station Estimation Method for Ecosystem Metabolism","title":"Estuarine Bayesian Single-Station Estimation Method for Ecosystem Metabolism","text":"R package Estuarine BAyesian Single-station Estimation method ecosystem metabolism.","code":""},{"path":"https://fawda123.github.io/EBASE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estuarine Bayesian Single-Station Estimation Method for Ecosystem Metabolism","text":"Install package follows: JAGS software must also installed use package. Follow instructions link download install version appropriate operating system.","code":"# Enable the r-universe repo options(repos = c(     fawda123 = 'https://fawda123.r-universe.dev',     CRAN = 'https://cloud.r-project.org'))  # Install install.packages('EBASE')"},{"path":"https://fawda123.github.io/EBASE/index.html","id":"minimal-example","dir":"","previous_headings":"","what":"Minimal example","title":"Estuarine Bayesian Single-Station Estimation Method for Ecosystem Metabolism","text":"","code":"library(dplyr) library(lubridate) library(doParallel)  # get four days of data dat <- exdat %>%   filter(month(exdat$DateTimeStamp) == 6 & day(exdat$DateTimeStamp) %in% 1:4)  ## # run ebase with defaults  # setup parallel backend cl <- makeCluster(2) registerDoParallel(cl)  res <- ebase(dat, interval = 900, H = 1.85, progress = TRUE)  stopCluster(cl)"},{"path":"https://fawda123.github.io/EBASE/reference/ebase.html","id":null,"dir":"Reference","previous_headings":"","what":"Estuarine Bayesian Single-station Estimation method for ecosystem metabolism — ebase","title":"Estuarine Bayesian Single-station Estimation method for ecosystem metabolism — ebase","text":"Estuarine Bayesian Single-station Estimation method ecosystem metabolism","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estuarine Bayesian Single-station Estimation method for ecosystem metabolism — ebase","text":"","code":"ebase(   dat,   H,   interval,   inits = NULL,   n.iter = 10000,   update.chains = TRUE,   n.burnin = n.iter * 0.5,   n.chains = 3,   n.thin = 10,   progress = FALSE,   model_file = NULL )"},{"path":"https://fawda123.github.io/EBASE/reference/ebase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estuarine Bayesian Single-station Estimation method for ecosystem metabolism — ebase","text":"dat input data frame H numeric single value water column depth (m) vector equal length number rows dat interval timestep interval seconds inits NULL function returns named list starting values parameters estimated jags model, see examples n.iter number MCMC iterations, passed jags update.chains logical run metab_update chains converge n.burnin number MCMC chains delete, passed jags n.chains number MCMC chains run, passed jags n.thin number nth iterations save chain, passed jags progress logical progress saved txt file names 'log.txt' working directory model_file NULL use ebase_model path model text file can used","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estuarine Bayesian Single-station Estimation method for ecosystem metabolism — ebase","text":"data frame metabolic estimates volumetric gross production (Pg_vol, O2 mmol/m3/d), respiration (Rt_vol,  O2 mmol/m3/d), gas exchange (D, O2 mmol/m3/d).  Additional parameters estimated model returned include b.  parameter constant represents primary production per quantum light units  (mmol/m3/d)(W/m2) used estimate gross production (Grace et al., 2015).  b parameter constant used estimate gas exchange hr/cm (provided 0.251 eqn. 4 Wanninkhof 2014).","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estuarine Bayesian Single-station Estimation method for ecosystem metabolism — ebase","text":"Required input data time series dissolved oxygen (mg/L), water temperature (C), salinity (psu), total PAR (W/m2/s), wind speed (m/s).  See exdat example data file representation required data.  Data typically continuously monitored water quality weather parameters hourly sub-hourly time steps.  Oxygen concentrations converted mmol/m3 prior metabolic estimation. Water column depth also required return volumetric estimates.  can supplied single value vector length equal number rows dat. metabolic estimates based mass balance equation Grace et al. 2015 gas exchange estimate Wanninkhof 2004.  similar provided BASEmetab R package https://github.com/dgiling/BASEmetab, modifications estimate different parameters. equation optimized JAGS model : $$ \\frac{\\delta{C_d}}{\\delta{t}} = [\\,aPAR]\\, - [\\,r]\\, - \\frac{1}{H}\\left[-bU_{10}^2\\left(\\frac{s_c}{600} \\right)^{-0.5} \\left(C_{Sat} - C_d \\right )\\right]$$ Gross production provided aPAR, respiration provided r, gas exchange provided remainder.  likelihood parameters , r, b given observed data estimated JAGS model using prior distributions shown model file. time step, change oxygen concentration time steps calculated equation using model inputs parameter guesses, finite difference approximation used estimate modeled oxygen concentration.  estimated concentration also returned comparison observed one measure model performance.","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estuarine Bayesian Single-station Estimation method for ecosystem metabolism — ebase","text":"Grace, M.R., Giling, D.P., Hladyz, S., Caron, V., Thompson, R.M., Nally, R.M., 2015. Fast processing diel oxygen curves: Estimating stream metabolism BASE (BAyesian Single-station Estimation). Limnology Oceanography: Methods 13, e10011. https://doi.org/10.1002/lom3.10011 Wanninkhof, R., 2014. Relationship wind speed gas exchange ocean revisited. Limnology Oceanography: Methods 12, 351–362. https://doi.org/10.4319/lom.2014.12.351","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estuarine Bayesian Single-station Estimation method for ecosystem metabolism — ebase","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(lubridate) #>  #> Attaching package: ‘lubridate’ #> The following objects are masked from ‘package:base’: #>  #>     date, intersect, setdiff, union library(doParallel) #> Loading required package: foreach #> Loading required package: iterators #> Loading required package: parallel  # get four days of data dat <- exdat %>%    filter(month(exdat$DateTimeStamp) == 6 & day(exdat$DateTimeStamp) %in% 1:4)  ## # run ebase with defaults, parallel  # setup parallel backend cl <- makeCluster(2) registerDoParallel(cl)  res <- ebase(dat, interval = 900, H = 1.85, progress = TRUE, n.chains = 2) #> Warning: already exporting variable(s): mod_in  stopCluster(cl)  ## # run ebase with different initial starting values for the three parameters, parallel  inits <- function(troc = 86400 / 900){   list(     a = 0.2 / troc,     r = 20 / troc,     b = 0.251 / 400   ) }  # setup parallel backend cl <- makeCluster(2) registerDoParallel(cl)    res <- ebase(dat, interval = 900, H = 1.85, progress = TRUE, inits = inits, n.chains = 2) #> Warning: already exporting variable(s): mod_in  stopCluster(cl)"},{"path":"https://fawda123.github.io/EBASE/reference/ebase_model.html","id":null,"dir":"Reference","previous_headings":"","what":"EBASE JAGS model — ebase_model","title":"EBASE JAGS model — ebase_model","text":"EBASE JAGS model","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EBASE JAGS model — ebase_model","text":"","code":"ebase_model()"},{"path":"https://fawda123.github.io/EBASE/reference/ebase_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot results from EBASE — ebase_plot","title":"Plot results from EBASE — ebase_plot","text":"Plot results EBASE","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot results from EBASE — ebase_plot","text":"","code":"ebase_plot(res, instantaneous = TRUE)"},{"path":"https://fawda123.github.io/EBASE/reference/ebase_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot results from EBASE — ebase_plot","text":"res output data frame ebase instantaneous logical indicating results instantaneous (default) averaged daily","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot results from EBASE — ebase_plot","text":"ggplot object","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot results from EBASE — ebase_plot","text":"D Rt_vol plotted negative values express contribution net metabolism.","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot results from EBASE — ebase_plot","text":"","code":"library(dplyr) library(lubridate) library(doParallel)  # get four days of data dat <- exdat %>%    filter(month(exdat$DateTimeStamp) == 6 & day(exdat$DateTimeStamp) %in% 1:4)  # run ebase with defaults, parallel  # setup parallel backend cl <- makeCluster(2) registerDoParallel(cl)  res <- ebase(dat, interval = 900, H = 1.85, progress = TRUE, n.chains = 2) #> Warning: already exporting variable(s): mod_in  stopCluster(cl)  # plot instantaneous ebase_plot(res)   # plot daily-averaged ebase_plot(res, instantaneous = FALSE)"},{"path":"https://fawda123.github.io/EBASE/reference/ebase_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for ebase — ebase_prep","title":"Prepare data for ebase — ebase_prep","text":"Prepare data ebase","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for ebase — ebase_prep","text":"","code":"ebase_prep(dat, H)"},{"path":"https://fawda123.github.io/EBASE/reference/ebase_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for ebase — ebase_prep","text":"dat input data frame H numeric single value water column depth (m) vector equal length number rows dat","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for ebase — ebase_prep","text":"data frame additional columns required ebase","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_prep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare data for ebase — ebase_prep","text":"Checks columns present matching exdat, converts dissolved oxygen mg/L mmol/m3, calculates Schmidt number (unitless) water temp (C) salinity (psu), calculates dissolved oxygen equilibrium concentration (mmol/m3) salinity temperature","code":""},{"path":"https://fawda123.github.io/EBASE/reference/ebase_prep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data for ebase — ebase_prep","text":"","code":"dat <- ebase_prep(exdat, H = 1.85) head(dat) #>         Date       DateTimeStamp   DO_obs   DO_sat    H Temp  Sal PAR WSpd #> 1 2012-02-23 2012-02-23 00:00:00 256.8124 265.8630 1.85 16.4 23.0   0  3.6 #> 2 2012-02-23 2012-02-23 00:15:00 256.5841 266.1861 1.85 16.4 22.8   0  3.5 #> 3 2012-02-23 2012-02-23 00:30:00 256.3705 266.3479 1.85 16.4 22.7   0  3.6 #> 4 2012-02-23 2012-02-23 00:45:00 256.1731 266.0245 1.85 16.4 22.9   0  4.2 #> 5 2012-02-23 2012-02-23 01:00:00 255.9933 266.3479 1.85 16.4 22.7   0  3.6 #> 6 2012-02-23 2012-02-23 01:15:00 255.8322 265.2179 1.85 16.4 23.4   0  4.1 #>         sc #> 1 660.2062 #> 2 659.8137 #> 3 659.6174 #> 4 660.0099 #> 5 659.6174 #> 6 660.9913"},{"path":"https://fawda123.github.io/EBASE/reference/exdat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data from Appalachicola NERRS — exdat","title":"Sample data from Appalachicola NERRS — exdat","text":"Sample data Appalachicola NERRS","code":""},{"path":"https://fawda123.github.io/EBASE/reference/exdat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data from Appalachicola NERRS — exdat","text":"","code":"exdat"},{"path":"https://fawda123.github.io/EBASE/reference/exdat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data from Appalachicola NERRS — exdat","text":"data.frame object 27645 rows 6 columns DateTimeStamp date time, Pacific/Jamaica time zone, 15 minute time step DO_obs dissolved oxygen, mg/L Temp water temperature, C Sal salinity, psu PAR total PAR, W/m2/s WSpd num, m/s","code":""},{"path":"https://fawda123.github.io/EBASE/reference/exdat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample data from Appalachicola NERRS — exdat","text":"time series detided using weighted regression WtRegDO: https://github.com/fawda123/WtRegDO","code":""},{"path":"https://fawda123.github.io/EBASE/reference/exdat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data from Appalachicola NERRS — exdat","text":"","code":"if (FALSE) { library(dplyr) library(tidyr)  exdat <- read.csv('data-raw/APNERR2012dtd.csv') %>%    rename(     PAR = I,     Sal = salinity,     Temp = tempC,      DO_obs = DO.meas   ) %>%    unite('DateTimeStamp', Date, Time, sep = ' ') %>%    mutate(     DateTimeStamp = lubridate::ymd_hms(DateTimeStamp, tz = 'America/Jamaica')   ) %>%    select(DateTimeStamp, DO_obs, Temp, Sal, PAR, WSpd)   save(exdat, file = 'data/exdat.RData', compress = 'xz') }"},{"path":"https://fawda123.github.io/EBASE/reference/metab_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update metabolism jags fit — metab_update","title":"Update metabolism jags fit — metab_update","text":"Update metabolism jags fit","code":""},{"path":"https://fawda123.github.io/EBASE/reference/metab_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update metabolism jags fit — metab_update","text":"","code":"metab_update(metabfit, update.chains, n.iter)"},{"path":"https://fawda123.github.io/EBASE/reference/metab_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update metabolism jags fit — metab_update","text":"metabfit initial jags metabolism output update.chains logical update, TRUE n.iter number iterations","code":""},{"path":"https://fawda123.github.io/EBASE/reference/metab_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update metabolism jags fit — metab_update","text":"Updated jags metabolism output","code":""},{"path":"https://fawda123.github.io/EBASE/reference/metab_update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update metabolism jags fit — metab_update","text":"function used ebase called directly user.  provides additional model iterations convergence achieved.","code":""}]
